<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="true" use-expressions="true" disable-url-rewriting="true" access-denied-page="/secure/auth/denied" >
	
		<security:intercept-url pattern="/secure/auth/login" requires-channel="https" access="permitAll"/>
		<security:intercept-url pattern="/j_spring_security_check" requires-channel="https"/>
		<security:intercept-url pattern="/secure/admin/**" requires-channel="https" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/secure/employee/**" requires-channel="https" access="hasRole('ROLE_BNK_EMPL')"/>
		<security:intercept-url pattern="/secure/customer/**" requires-channel="https" access="hasRole('ROLE_CUST')"/>
		<security:intercept-url pattern="/secure/merchant/**" requires-channel="https" access="hasRole('ROLE_MERC')"/>
			
		<security:form-login
				login-page="/secure/auth/login"
				authentication-failure-url="/secure/auth/login?error=true" 
				authentication-success-handler-ref="myAuthenticationSuccessHandler"			
				/>
			
		<security:session-management invalid-session-url="/secure/auth/login" session-authentication-error-url="/secure/maxsession" session-fixation-protection="migrateSession">
	    	<security:concurrency-control
	    	   max-sessions="1"
		       error-if-maximum-exceeded="true" 
		       />
		</security:session-management>	
		  	
		<security:logout delete-cookies="JSESSIONID"
				invalidate-session="true" 
				logout-success-url="/secure/auth/login" 
				/>

		<!-- enable csrf protection -->
		<!-- <security:csrf/> -->
	</security:http>
	
	<bean id="csrfSecurityRequestMatcher"
        class="edu.asu.secure.SynnovationBank.Handler.CsrfSecurityRequestMatcher" />
	
	<bean id="authenticationTrustResolver"
        class="org.springframework.security.authentication.AuthenticationTrustResolverImpl" />
	
	<!-- Use a BCrypt encoder since the user's passwords are stored as BCrypt in the database -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg name="strength" value="10" /> 
  	</bean>
  	
  	<!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
	<bean id="userDetailsDao" class="edu.asu.secure.SynnovationBank.DaoImpl.UserDetailsDaoImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
	<bean id="myUserDetailsService" class="edu.asu.secure.SynnovationBank.ServiceImpl.CustomUserDetailsService">
		<property name="usersByUsernameQuery" value="select * from person where user_id = lower(?)"/>
		<property name="authoritiesByUsernameQuery" value="select user_id, role from person where user_id =lower(?)" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<bean id="authenticationProvider"
        	class="edu.asu.secure.SynnovationBank.Handler.LimitLoginAuthenticationProvider">
        	<property name ="userDetailsService" ref="myUserDetailsService"></property>
        	<property name ="userDetailsDao" ref="userDetailsDao"></property>
        	<property name ="passwordEncoder" ref="passwordEncoder"></property>
        </bean>
        	
        	
	<!-- The custom authentication success handler to redirect user's to user specific page instead of common page-->
	<bean id="myAuthenticationSuccessHandler"
        	class="edu.asu.secure.SynnovationBank.Handler.UrlAuthenticationSuccessHandler" />
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager>
	        <security:authentication-provider ref="authenticationProvider">
	        </security:authentication-provider>
	</security:authentication-manager>

</beans>
